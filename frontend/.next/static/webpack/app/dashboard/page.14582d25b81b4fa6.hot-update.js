"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/omdb-service.ts":
/*!*****************************!*\
  !*** ./lib/omdb-service.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   omdbService: function() { return /* binding */ omdbService; }\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./lib/api.ts\");\n\nclass OMDbService {\n    // Get popular movies\n    async getPopularMovies() {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/popular\");\n    }\n    // Get top rated movies\n    async getTopRatedMovies() {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/top-rated\");\n    }\n    // Get trending movies\n    async getTrendingMovies() {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/trending\");\n    }\n    // Get now playing movies\n    async getNowPlayingMovies() {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/now-playing\");\n    }\n    // Get upcoming movies\n    async getUpcomingMovies() {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/upcoming\");\n    }\n    // Search movies\n    async searchMovies(query) {\n        let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/search?query=\".concat(encodeURIComponent(query), \"&page=\").concat(page));\n    }\n    // Get movies by genre\n    async getMoviesByGenre(genre) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 12;\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/genre/\".concat(encodeURIComponent(genre), \"?limit=\").concat(limit));\n    }\n    // Get movie details\n    async getMovieDetails(imdbId) {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/\".concat(imdbId));\n    }\n    // Get movie by title\n    async getMovieByTitle(title) {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/movies/title/\".concat(encodeURIComponent(title)));\n    }\n    // Get genres\n    async getGenres() {\n        return _api__WEBPACK_IMPORTED_MODULE_0__.apiService.request(\"/omdb/genres\");\n    }\n    // Helper function to get genre name by ID\n    getGenreName(genreId, genres) {\n        const genre = genres.find((g)=>g.id === genreId);\n        return genre ? genre.name : \"Unknown\";\n    }\n    // Helper function to get genre names by IDs\n    getGenreNames(genreIds, genres) {\n        return genreIds.map((id)=>this.getGenreName(id, genres));\n    }\n    // Helper function to format rating\n    formatRating(rating) {\n        return \"\".concat(rating.toFixed(1), \"/10\");\n    }\n    // Helper function to format duration\n    formatDuration(duration) {\n        return duration;\n    }\n    // Helper function to get year from release date\n    getYear(releaseDate) {\n        return new Date(releaseDate).getFullYear();\n    }\n    // Helper function to check if movie is recent (within last 2 years)\n    isRecentMovie(releaseDate) {\n        const movieYear = new Date(releaseDate).getFullYear();\n        const currentYear = new Date().getFullYear();\n        return currentYear - movieYear <= 2;\n    }\n    // Helper function to get movie poster URL\n    getPosterUrl(poster) {\n        if (poster.startsWith(\"http\")) {\n            return poster;\n        }\n        return poster || \"/placeholder.svg\";\n    }\n    // Helper function to get movie backdrop URL\n    getBackdropUrl(backdrop) {\n        if (backdrop.startsWith(\"http\")) {\n            return backdrop;\n        }\n        return backdrop || \"/placeholder.svg\";\n    }\n    // Helper function to get movie year range\n    getYearRange(movies) {\n        if (movies.length === 0) return {\n            min: 0,\n            max: 0\n        };\n        const years = movies.map((movie)=>movie.year);\n        return {\n            min: Math.min(...years),\n            max: Math.max(...years)\n        };\n    }\n    // Helper function to get unique genres from movies\n    getUniqueGenres(movies) {\n        const genres = new Set();\n        movies.forEach((movie)=>{\n            movie.genre.forEach((genre)=>genres.add(genre));\n        });\n        return Array.from(genres);\n    }\n    // Helper function to filter movies by rating\n    filterByRating(movies, minRating) {\n        return movies.filter((movie)=>movie.rating >= minRating);\n    }\n    // Helper function to filter movies by year\n    filterByYear(movies, year) {\n        return movies.filter((movie)=>movie.year === year);\n    }\n    // Helper function to filter movies by genre\n    filterByGenre(movies, genre) {\n        return movies.filter((movie)=>movie.genre.includes(genre));\n    }\n    // Helper function to sort movies by rating\n    sortByRating(movies) {\n        let order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"desc\";\n        return [\n            ...movies\n        ].sort((a, b)=>{\n            return order === \"desc\" ? b.rating - a.rating : a.rating - b.rating;\n        });\n    }\n    // Helper function to sort movies by year\n    sortByYear(movies) {\n        let order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"desc\";\n        return [\n            ...movies\n        ].sort((a, b)=>{\n            return order === \"desc\" ? b.year - a.year : a.year - b.year;\n        });\n    }\n    // Helper function to sort movies by popularity\n    sortByPopularity(movies) {\n        let order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"desc\";\n        return [\n            ...movies\n        ].sort((a, b)=>{\n            return order === \"desc\" ? b.popularity - a.popularity : a.popularity - b.popularity;\n        });\n    }\n    // Helper function to format box office\n    formatBoxOffice(boxOffice) {\n        if (boxOffice === \"N/A\" || !boxOffice) return \"N/A\";\n        return boxOffice;\n    }\n    // Helper function to format awards\n    formatAwards(awards) {\n        if (awards === \"N/A\" || !awards) return \"No awards information\";\n        return awards;\n    }\n    // Helper function to get movie age rating\n    getAgeRating(rated) {\n        if (rated === \"N/A\" || !rated) return \"Not Rated\";\n        return rated;\n    }\n}\nconst omdbService = new OMDbService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (omdbService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/omdb-service.ts\n"));

/***/ })

});